# <a name="add-configuration" id="add-configuration" data-magellan-target="add-configuration">Configuration Templates</a>

Habitat allows you to templatize your application's native configuration files using [Handlebars](http://handlebarsjs.com/) syntax. The following sections describe how to create tunable configuration elements for your application or service.

- [Setting a config value](#setting-config-value)
- [Branching and looping](#branching-looping)
- [Handlebar Helpers](#handlebar-helpers)

<h1 id="setting-config-value" class="anchor">Setting a config value</h1>

Template variables, also referred to as tags, are indicated by double curly braces: `{{a_variable}}`. In Habitat, tunable config elements are prefixed with `cfg.` to indicate that the value is user-tunable.

Here's an example of how to make a configuration element user-tunable. Assume that we have a native configuration file named `service.conf`. In `service.conf`, the following configuration element is defined:

```conf
recv_buffer 128
```

We can make this user tunable like this:

```handlebars
recv_buffer {{cfg.recv_buffer}}
```

Habitat can read values that it will use to render the templatize
config files in three ways:

1. `default.toml` - Each plan includes a `default.toml` file that specifies the default values to use in the absence of any user provided inputs. These files are written in [TOML](https://github.com/toml-lang/toml), a simple config format.
2. Environment variable - At start up, tunable config values can be passed to Habitat using environment variables.
3. At runtime - Users can alter config at runtime using `hab config
apply`. The input for this command also uses the TOML format.

Here's what we'd add to our project's `default.toml` file to provide a
default value for the `recv_buffer` tunable:

```toml
recv_buffer = 128
```

<h1 id="branching-looping" class="anchor">Branching and looping</h1>

You can use block expressions to add basic logic to your template such as checking if a
value exists or iterating through a list of items.

Block expressions use a helper function to perform the logic. The
syntax is the same for all block expressions and looks like this:

```handlebars
{{#helper blockname}}
  {{expression}}
{{/helper}}
```

Habitat supports the standard [built-in helpers](http://handlebarsjs.com/builtin_helpers.html):

* `if`
* `unless`
* `each`
* `with`
* `lookup`
* `>` ([partials](http://handlebarsjs.com/partials.html))
* `log`

> Note: Habitat also has a collection of [handlebar helpers](/docs/reference/#handlebars-helpers) to assist in writing configuration and hook files.

The most common block helpers that you will probably use are the `if` and `with` helpers.

The `if` helper evaluates conditional statements. The values `false`,
0, "", as well as undefined values all evaluate to false in `if`
blocks.

Here's an example that will only write out configuration for the
unixsocket tunable if a value was set by the user:

```handlebars
{{~#if cfg.unixsocket}}
unixsocket {{cfg.unixsocket}}
{{~/if}}
```

> Note: The `~` indicates that whitespace should be omitted when rendering

TOML allows you to create sections (called [TOML tables](https://github.com/toml-lang/toml#table)) to better organize your configuration variables. For example, your `default.toml` or user defined TOML could have a `[repl]` section for variables controlling replication behavior. Here's what that looks like:

```toml default.toml
[repl]
backlog-size = 200
backlog-ttl = 100
disable-tcp-nodelay = no
```

When writing your template, you can use the `with` helper to reduce duplication:

```handlebars
{{#with cfg.repl}}
  repl-backlog-size {{backlog-size}}
  repl-backlog-ttl {{backlog-ttl}}
  repl-disable-tcp-nodelay {{disable-tcp-nodelay}}
{{/with}}
```

Helpers can also be nested and used together in block expressions. Here is another example from the redis.config file where the `if` and `with` helpers are used together to set up `core/redis` Habitat services  in a leader-follower topology.

```handlebars
{{#if svc.me.follower}}
  slaveof {{svc.leader.sys.ip}} {{svc.leader.cfg.port}}
{/if}}
```

Here's an example using `each` to render multiple server entries:

```handlebars
{{~#each cfg.servers as |server| }}
server {
  host {{server.host}}
  port {{server.port}}
}
{{~/each}}
```

You would specify the corresponding values in a TOML file using an
[array of tables](https://github.com/toml-lang/toml#array-of-tables)
like this:

```toml default.toml
[[servers]]
host = "host-1"
port = 4545

[[servers]]
host = "host-2"
port = 3434
```
