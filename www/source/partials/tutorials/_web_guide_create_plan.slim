section
 h1 Create Your Plan

 p At the center of Habitat packaging is the plan. This is a directory comprised of shell scripts and optional configuration files that define how you download, configure, make, install, and manage the lifecycle of the software in the package. When writing a plan, it's important to understand that you are defining both how the package is built and how the Habitat service will behave when the Supervisor starts and manages the child process in the package.

 p As demonstrated in #{link_to 'Build a Sample App', '/tutorials/sample-app/'}, the quickest way to get started building your application with Habitat is by using scaffolding. Scaffolding helps you build and package applications which follow the common patterns and practices for that application type. The more your application follows convention, the more scaffolding helps you.

 - if "#{current_page.data.platform_short}" == "ruby"
   p For a Ruby-on-Rails application, the Ruby scaffolding parses your Gemfile and uses that information to build your application with the dependencies listed there. It will also detect what version of Rails you're running and set sensible default behaviors for your <code>init</code> and <code>run</code> hooks.

 p To use scaffolding, navigate to the root of your project repo and run the following:

 = code(:shell) do
   |
    $ hab plan init -s #{current_page.data.platform_short}

 p Using <code>hab plan init</code> will result in a new directory located at <code>/path/to/repo/habitat</code> on your workstation. A <code>plan.sh</code> file will be created and the <code>pkg_name</code> variable in it will be set to the name of the parent directory. Also, any environment variables that you have previouly set (such as <code>HAB_ORIGIN</code>) will be used to populate the respective <code>pkg_*</code> variables. Because you specified the #{current_page.data.platform} scaffolding as an argument, your plan.sh will also include a reference to it.

 p See #{link_to 'hab plan init', '/docs/reference/habitat-cli#hab-plan-init'} for more information on how to use this subcommand.

 p The basic structure of a plan is shown below:

 = code(:shell) do
   |
    $ tee /habitat
    .
    ├── config
    ├── default.toml
    ├── hooks
    └── plan.sh

 blockquote
  p Note: The plan.sh file is the only required file to create a package. Configuration files, runtime hooks, and other source files are optional. For more information on creating plans, see the #{link_to 'Writing plans', '/docs/developing-packages/#write-plans'} section of the reference documentation.

 h2 Versioning

 = partial "partials/global/versioning_concepts"

 - if "#{current_page.data.platform_short}" != "gradle"
   h3 Defining the #{current_page.data.platform} version
 - else
   h3 Defining #{current_page.data.platform} and Java-related version information

 = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_version"

 -if "#{current_page.data.platform_short}" == "node"
  h2 Package manager detection

  p The #{current_page.data.platform} scaffolding can detect and use either #{link_to 'npm','https://www.npmjs.com/'} or #{link_to 'Yarn','https://yarnpkg.com/en/'} to resolve, download, and install #{current_page.data.platform} package dependencies.

  p If a <code>yarn.lock</code> file is found in your application's root directory, then Yarn will be used to install dependencies. The <code>core/yarn</code> package will also be injected into your plan's <code>pkg_build_deps</code> array.

  p If no <code>yarn.lock</code> file is found in your applications's root directory, then npm will be used to install dependencies. The version of npm will be the version that ships with the version of #{current_page.data.platform} selected.

  p The next section describes how to override and specify the package manager yourself.

  h3 Specifying the package manager in your plan

  p You can override the default detection logic which determines the package manager by setting the <code>scaffolding_pkg_manager</code> variable in your plan to either <code>"npm"</code> or <code>"yarn"</code>. For example:

  = code(:bash) do
    |
     pkg_name=my_app
     pkg_origin=acmecorp
     pkg_version="0.1.0"
     pkg_scaffolding=core/scaffolding-node

     scaffolding_pkg_manager=yarn

  p This forces the scaffolding to use Yarn over npm, even if no <code>yarn.lock</code> file was present.

 p The rest of the steps in this guide will show you how to customize your plan, connect to common external services, and test your package. The customization steps are not required; however, they may be needed on more advanced #{current_page.data.platform} web applications.

= link_to 'Next: Define Dependencies', "/tutorials/build-your-own/#{current_page.data.platform_short}/define-dependencies/", class: 'button cta'
